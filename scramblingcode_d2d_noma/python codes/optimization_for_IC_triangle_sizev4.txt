#optimization for determining the IC triangle size
#ref: https://www.cvxpy.org/examples/basic/linear_program.html
#Import packages.
import cvxpy as cp
import numpy as np
import math 

L = 3;
N = 5;
e_sym=1;
e_th = math.factorial(N-1);
i_sym = math.factorial(N-1);
lsta = [1,3];

for i in range(3,N+1):
  lsta.append(math.factorial(i));

x  = 1*np.ones((4,4));
P_0 = np.ones((4,1));
P_1 = np.ones((4,1));
delta_1 = np.ones((4,1));
x_0 = x[:,[0]];
x_1 = x[:,[1]];

P_k = np.zeros((4,4));
delta_k = np.zeros((4,4));

print(P_k);

print(x_0[:,0]);

print(P_1[:,0]*(delta_1[:,0])@(x_1[:,0]));

print('star1: ',sum(sum((P_1[[2,3],:]*delta_k[[2,3],:])*x[[2,3],:])));

print((x[0]))

print('star2',np.sum(x))

# Generate a random non-trivial linear program.
np.random.seed(1)

# Define and solve the CVXPY problem.
n_sym = cp.Variable(1)
e_sic = cp.Variable(1)
p_signal = cp.Variable(1)
p_interference  = cp.Variable(1)
N_0  = cp.Variable(1)
x = cp.Variable((n,n), boolean=True)
P_k = cp.Variable((n,n), boolean=True)
print(x)
#for conventional power noma
prob = cp.Problem(cp.Maximize(n_sym),
                 [e_sic <= 100,
                  lsta[1] <= n_sym, n_sym <= lsta[-1],
                  #interference power negligible can remove them 
                  #if they are below 1%
                  p_signal == P_0[:,0]@(x_0[:,0]),
                  p_interference == P_1[:,0]*(delta_1[:,0])@(x_1[:,0]),
                  #sum(sum((P_1[[2,3],:]*delta_k[[2,3],:])*x[[2,3],:])/(p_signal+p_interference))>= 0.1,
                  np.sum(x) == n_sym,             
                  e_sic == N_0*(N_0+L-2)*n_sym*0.01,
                  N_0 == sum(x[0])]) #n_sym should be in in lsta# can put it outside in a if condition
prob.solve(solver=cp.ECOS_BB)

print("A solution nsym is",n_sym.value)
if (n_sym.value != None and math.ceil(n_sym.value) in lsta):
  # Print result.
  print("\nThe optimal value is", prob.value)
  print("A solution nsym is",math.ceil(n_sym.value))